@page "/"
@using BlazorAnimate
@using Yalda.Client.Core
@using System.Text.Json


<div class="container rtl text-center">
    <div class="row">
        <div class="col text-dark">
            <br />
            <div class="row align-items-start">
                <div class="col">
                     <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(2)" >
                         <img src="/hafez/button-noshadow.png" @onclick="ShowMessage" class="@imageAnimationClass" />
                    </Animate>
                    
                </div>
            </div>
            <div class="row align-items-center">
                <div class="col">
                    @if (showMes)
                    {
                        <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(3)"  >
                            <div @onclick="HideMessage">
                                <p style="font-size:4vw;">@mesra[0]</p>
                                <p style="font-size:4vw;">@mesra[1]</p>
                            </div>
                        </Animate>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    bool show = false;
    bool showMes = false;
    string[] mesra = new string[2];
    List<Sher>? Shers = new List<Sher>(); // Create a Sher class to hold your data
    string imageAnimationClass = ""; // Class for image animation

    private Animate myAnim;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync("https://yalda.darkube.app/hafez/hafez.json");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            Shers = JsonSerializer.Deserialize<List<Sher>>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true // To ignore case when deserializing
            });
        }
        else
        {
            // Handle the error if the request fails
            // For example: Log the error, display an error message, etc.
        }
    }

    void SendMessage()
    {
        showMes = !showMes;

        if (showMes)
        {
            int num = GenerateRandomNumber(1, 3406);
            var found = Shers.FirstOrDefault(element => element.Id == num);

            if (found != null)
            {
                mesra = found.Beit.Split('*');
                showMes = true;
               	//myAnim.Run();

            }
        }
    }

    void HideMessage()
    {
        showMes = false;
        show = true;
        ApplyImageAnimation(""); // Remove animation when hiding message
    }

    void ApplyImageAnimation(string className)
    {
        imageAnimationClass = className;
        StateHasChanged(); // Ensure Blazor updates the UI after applying the class

        // Remove the animation class after the animation duration completes
        if (!string.IsNullOrEmpty(className))
        {
            Task.Delay(1000).ContinueWith(_ =>
            {
                imageAnimationClass = "";
                StateHasChanged();
            });
        }
    }

    void ShowMessage()
    {
        SendMessage();
    }

    int GenerateRandomNumber(int min, int max)
    {
        Random random = new Random();
        return random.Next(min, max + 1);
    }

}
